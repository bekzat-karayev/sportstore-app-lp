###### UNDERSTANDING IENUMERABLE<T> AND IQUERYABLE<T> INTERFACES ######

The IQueryable<T> interface is useful because it allows a collection of objects to be queried
efficiently. Using the IQueryable<T> interface allows me to ask the database for just the objects
that I require using standard LINQ statements and without needing to know what database server stores
the data or how it processes the query. Without the IQueryable<T> interface, e.g. I would have to retrieve
all of the Product objects from the database and then discard the ones that I don’t want, which
becomes an expensive operation as the amount of data used by an application increases. It is for this
reason that the IQueryable<T> interface is typically used instead of IEnumerable<T> in database
repository interfaces and classes.
However, care must be taken with the IQueryable<T> interface because each time the collection of
objects is enumerated, the query will be evaluated again, which means that a new query will be sent to
the database. This can undermine the efficiency gains of using IQueryable<T>. In such situations, you
can convert the IQueryable<T> interface to a more predictable form using the ToList or ToArray
extension method.

###### USING THE VISUAL STUDIO SCAFFOLDING ######

Visual Studio supports scaffolding (automatic generation of basic code, files, or structures that provide a starting point 
for a particular feature or functionality )to add items to a project.
The code and markup that the scaffolding generates are so generic as to be all but useless, and the scenarios 
that are supported are narrow and don’t address common development problems. If you want to make sure you know not only 
how to create ASP.NET Core applications but also how everything works behind the scenes, then spend some time for initial
preparation work to build foundation and set project files, folders and configurations according to appropriate 
application design.