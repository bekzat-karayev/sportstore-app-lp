###### UNDERSTANDING IENUMERABLE<T> AND IQUERYABLE<T> INTERFACES ######

    The IQueryable<T> interface is useful because it allows a collection of objects to be queried
efficiently. Using the IQueryable<T> interface allows me to ask the database for just the objects
that I require using standard LINQ statements and without needing to know what database server stores
the data or how it processes the query. Without the IQueryable<T> interface, e.g. I would have to retrieve
all of the Product objects from the database and then discard the ones that I don’t want, which
becomes an expensive operation as the amount of data used by an application increases. It is for this
reason that the IQueryable<T> interface is typically used instead of IEnumerable<T> in database
repository interfaces and classes.
    However, care must be taken with the IQueryable<T> interface because each time the collection of
objects is enumerated, the query will be evaluated again, which means that a new query will be sent to
the database. This can undermine the efficiency gains of using IQueryable<T>. In such situations, you
can convert the IQueryable<T> interface to a more predictable form using the ToList or ToArray
extension method.

###### USING THE VISUAL STUDIO SCAFFOLDING ######

    Visual Studio supports scaffolding (automatic generation of basic code, files, or structures that provide a starting point 
for a particular feature or functionality )to add items to a project.
    The code and markup that the scaffolding generates are so generic as to be all but useless, and the scenarios 
that are supported are narrow and don’t address common development problems. If you want to make sure you know not only 
how to create ASP.NET Core applications but also how everything works behind the scenes, then spend some time for initial
preparation work to build foundation and set project files, folders and configurations according to appropriate 
application design.

###### VIEW VS VIEWMODEL ######

    The "View" refers to the user interface (UI) or the presentation layer of an application. It represents the visual elements 
that users interact with, such as web pages, forms, or screens in an application. In web development, a view is typically 
an HTML page with embedded code or placeholders that get populated with data from the backend or ViewModel.
    The "ViewModel" is part of the MVVM pattern and acts as an intermediary between the View and the Model (business logic or data).
It provides data and behavior to the View, serving as a data binder. The ViewModel prepares the data that the View needs 
and exposes it in a way that the View can easily consume, abstracting away the complexity of the underlying data or 
business logic.
    The relationship between View and ViewModel is typically one of data binding. The View binds to properties and commands 
provided by the ViewModel to display data and handle user interactions. This separation of concerns helps in creating more 
maintainable and testable code by keeping the UI logic separate from the business logic.
    For instance, in an ASP.NET MVC application, the View (HTML page) might display data from the ViewModel 
(which retrieves data from the Model), and user interactions in the View might trigger actions defined in the ViewModel.

###### PARTIAL VIEW VS _LAYOUT FILE ######

    Partial views are reusable chunks of views that can be embedded within other views, allowing you to create modular and 
reusable components within your application. They can have their own model and can be rendered within different views.
    On the other hand, _Layout.cshtml serves as a master layout file for your application. It defines the common structure, 
such as HTML structure, header, footer, navigation, and often includes common scripts and styles. It's used as a template that 
other views (content views) will be placed into using the @RenderBody() method or similar mechanisms.
    While both partial views and layout views are reusable components in ASP.NET Core, they serve different purposes. 
Partial views are more focused on encapsulating and reusing specific sections of content within views, while the layout view 
defines the overall structure and common elements for the entire application.

###### PARTIAL VIEW VS VIEW COMPONENT ######

    In summary, Partial Views are simpler, reusable chunks of views embedded within other views, while View Components 
offer more flexibility, encapsulation, and the ability to encapsulate logic, making them suitable for more complex and 
independent UI components in ASP.NET Core applications.
    Partial Views:
        Purpose: Partial Views are reusable chunks of views or UI components that allow you to break down 
            complex UIs into smaller, manageable parts. They are like sub-views that can be embedded within other views.
        Usage: They are typically used within views and can have their own model or share the model of the parent view.
        Rendered: Partial Views are rendered within another view using @Html.Partial() or @Html.RenderPartial() methods.
        Scope: They are tightly coupled with the parent view and often share the same context (model, layout, etc.).
    View Components:
        Purpose: View Components are more versatile and powerful. They are similar to mini-controllers that render 
            a chunk of HTML and can have logic.
        Usage: View Components are more independent and can have their own models, business logic, and rendering logic. 
            They can be used in multiple views and across the application.
        Rendered: They are rendered within a view using the @Component.Invoke() or @Component.InvokeAsync() method.
        Scope: View Components are more modular and encapsulated, making them ideal for more complex UI elements or 
            components requiring independent logic.