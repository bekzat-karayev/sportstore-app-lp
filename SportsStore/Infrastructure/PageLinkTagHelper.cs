using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.Routing;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;
using SportsStore.Models.ViewModels;

namespace SportsStore.infrastructure;

/*  This tag helper populates a <div> element with <a> elements that correspond to pages of products.
    The code for a tag helper can look tortured because C# and HTML don’t mix easily. But using tag helpers is preferable 
to including blocks of C# code in a view because a tag helper can be easily unit tested.
*/
[HtmlTargetElement("div", Attributes = "page-model")]
public class PageLinkTagHelper : TagHelper
{
    private IUrlHelperFactory urlHelperFactory;

    public PageLinkTagHelper(IUrlHelperFactory helperFactory)
    {
        urlHelperFactory = helperFactory;
    }

    [ViewContext]
    [HtmlAttributeNotBound]
    public ViewContext? ViewContext { get; set; }
    public PagingInfo? PageModel { get; set; }
    public string? PageAction { get; set; }

    /*  Now that I want to start generating more complex URLs, I need a way to receive additional information 
    from the view without having to add extra properties to the tag helper class. Fortunately, tag helpers have 
    a nice feature that allows properties with a common prefix to be received all together in a single collection
    */
    [HtmlAttributeName(DictionaryAttributePrefix = "page-url-")]
    public Dictionary<string, object> PageUrlValues { get; set; } = new();

    /*  I need to style the buttons generated by the PageLinkTagHelper class, but I don’t want to hardwire
    the Bootstrap classes into the C# code because it makes it harder to reuse the tag helper elsewhere in the
    application or change the appearance of the buttons. 
        Instead, I have defined custom attributes on the `div` element that specify the classes that I require, 
    and these correspond to properties I added to the tag helper class, which are then used to style 
    the `a` elements that are produced.
        The values of the attributes are automatically used to set the tag helper property values, with the
    mapping between the HTML attribute name format (page-class-normal) and the C# property name format
    (PageClassNormal) taken into account. This allows tag helpers to respond differently based on the attributes
    of an HTML element, creating a more flexible way to generate content in an ASP.NET Core application.
    */
    public bool PageClassesEnabled { get; set; } = false;
    public string PageClass { get; set; } = String.Empty;
    public string PageClassNormal { get; set; } = String.Empty;
    public string PageClassSelected { get; set; } = String.Empty;

    public override void Process(TagHelperContext context, TagHelperOutput output)
    {
        if (ViewContext != null && PageModel != null)
        {
            IUrlHelper urlHelper = urlHelperFactory.GetUrlHelper(ViewContext);
            TagBuilder result = new TagBuilder("div");

            for (int index = 1; index <= PageModel.TotalPages; index++)
            {
                TagBuilder tag = new TagBuilder("a");
                PageUrlValues["productPage"] = index;
                tag.Attributes["href"] = urlHelper.Action( PageAction, PageUrlValues);

                if (PageClassesEnabled)
                {
                    tag.AddCssClass(PageClass);
                    tag.AddCssClass(index == PageModel.CurrentPage ? PageClassSelected : PageClassNormal);
                }

                tag.InnerHtml.Append(index.ToString());
                result.InnerHtml.AppendHtml(tag);
            }
            output.Content.AppendHtml(result.InnerHtml);
        }
    }
}
