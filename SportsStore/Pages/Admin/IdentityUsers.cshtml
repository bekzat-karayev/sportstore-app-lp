@page
@model IdentityUsersModel
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization

@*  Now that I have configured ASP.NET Core Identity, I can apply an authorization policy to the parts of the application that I want to protect. 
I am going to use the most basic authorization policy possible, which is to allow access to any authenticated user. Although this can be a useful policy 
in real applications as well, there are also options for creating finer-grained authorization controls, but since the SportsStore application has only 
one user, distinguishing between anonymous and authenticated requests is sufficient.
*@
<h3 class="bg-primary text-white text-center p-2">Admin User</h3>
<table class="table table-sm table-striped table-bordered">
    <tbody>
        <tr>
            <th>User</th>
            <td>@Model.AdminUser.UserName</td>
        </tr>
        <tr>
            <th>Email</th>
            <td>@Model.AdminUser.Email</td>
        </tr>
        <tr>
            <th>Phone</th>
            <td>@Model.AdminUser.PhoneNumber</td>
        </tr>
    </tbody>
</table>

@functions {

    // For controllers and Razor pages, the Authorize attribute is used to restrict access
    [Authorize]
    public class IdentityUsersModel : PageModel 
    {
        private UserManager<IdentityUser> userManager;

        public IdentityUsersModel(UserManager<IdentityUser> manager)
        {
            userManager = manager;
        }

        public IdentityUser AdminUser { get; set; } = new();

        public async Task OnGetAsync()
        {
            AdminUser = await userManager.FindByNameAsync("Admin") ?? new();
        }
    }
}